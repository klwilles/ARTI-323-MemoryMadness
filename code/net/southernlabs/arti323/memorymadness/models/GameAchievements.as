/**  *	Singleton, only one instance of this object will exist */package net.southernlabs.arti323.memorymadness.models {		import net.southernlabs.arti323.memorymadness.config.GameConfig;	import flash.events.TimerEvent;	import flash.utils.Timer;		public class GameAchievements {				private var points:int;		private var level:uint;		private var matches:uint;		private var minutetimer:Timer = new Timer(GameConfig.ALLOCATED_TIME, 1); // 1 is the repeat count				private static var _instance:GameAchievements;		public function GameAchievements(p:PrivateClass) {			points = 0;			level = 1;			matches = 0;						startTime();					}         public function onTick(event:TimerEvent):void          {             // displays the tick count so far             // The target of this event is the Timer instance itself.             trace("tick " + event.target.currentCount);         }          public function onTimerComplete(event:TimerEvent):void         {             trace("Time's Up!");         } 						public static function getInstance():GameAchievements {						if(GameAchievements._instance == null) {				// first construction				GameAchievements._instance=new GameAchievements(new PrivateClass());			}			return GameAchievements._instance;					}				public function addPoints(i:uint){			points+=i;		}				public function getPoints():uint {			return points;		}				public function incrementLevel(i:uint){			level+=i;		}				public function getLevel():uint {			return level;		}				public function startTime(){			// creates a new five-second Timer             // designates listeners for the interval and completion events             minuteTimer.addEventListener(TimerEvent.TIMER, onTick);             minuteTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);            // starts the timer ticking             minuteTimer.start();		}				public function getTime():String{			//		}				public function addMatch(){			matches++;		}				public function getMatches():uint {			return matches;		}	}	}class PrivateClass {	public function PrivateClass() {		trace("=> GameState Constructed");	}}