package net.southernlabs.arti323.memorymadness.views {	import flash.events.*;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.utils.getTimer;	import flash.utils.Timer;	import net.southernlabs.arti323.memorymadness.config.GameConfig;	import flash.events.TimerEvent;	import flashx.textLayout.elements.ListElement;		public class LevelView01 extends MovieClip {		//things get created here; already created things (like instances) go under the constructor function		private var firstCard:Card = null;		private var secondCard:Card = null;		private var bob:MrBobView;								//timer to return cards to face-down		private var flipBackTimer:Timer;		private var matchViewTimer:Timer;				//score		private var gameScore:int = 0;		private static const pointsForMatch:int = 50;		private static const pointsForMiss:int = -5;		score_txt:TextField;				//main time		private var gameStartTime:uint = getTimer();		private var gameTime:uint = 0;		time_txt:TextField;				//match tracker		private var matchTracker:int = 12;				public function LevelView01() {			// constructor code			trace("LevelView01 ***** instantiated");						bob = new MrBobView();			bob.x = 141.5;			bob.y = 782.85;			bob.scaleX = 1.25;			bob.scaleY = 1.25;			addChild(bob);						//list			listFull.lineHat.visible = false;			listFull.lineMonocle.visible = false;			listFull.lineTie.visible = false;			listFull.lineSuit.visible = false;			listFull.lineWallet.visible = false;			listFull.linePen.visible = false;			listFull.lineGloves.visible = false;			listFull.lineShoes.visible = false;			listFull.lineCane.visible = false;			listFull.lineBrush.visible = false;			listFull.lineWatch.visible = false;			listFull.lineWatch.visible = false;			listFull.lineKeys.visible = false;			//make a list of card numbers			var cardlist:Array = new Array();			for(var i:uint=0; i<GameConfig.BOARD_WIDTH * GameConfig.BOARD_HEIGHT/2; i++) {				cardlist.push(i);				cardlist.push(i);			}						for(var row:uint=0; row<GameConfig.BOARD_WIDTH; row++) { //horizontal				for(var col:uint=0; col<GameConfig.BOARD_HEIGHT; col++) { //vertical										var c:Card = new Card();					c.x = row * GameConfig.CARD_HORIZONTAL_SPACING + GameConfig.BOARD_OFFSET_X; 					c.y = col * GameConfig.CARD_VERTICAL_SPACING + GameConfig.BOARD_OFFSET_Y;					var r:uint = Math.floor(Math.random()*cardlist.length); //get a random face					c.setFrameNumber(cardlist[r]); //assign face to card					cardlist.splice(r,1); //remove face from list					c.addEventListener(MouseEvent.CLICK,clickCard);					addChild(c); //show the card				}			}		addEventListener(Event.ENTER_FRAME, showTime);	}				function showTime(event:Event) {				gameTime = getTimer() - gameStartTime;				time_txt.text = "Time: "+clockTime(gameTime);					//set up the clock			}					function clockTime(ms:int) {			var seconds:int = Math.floor(ms/1000);			var minutes:int = Math.floor(seconds/60);			seconds -=minutes*60;			var timeString:String = minutes+":"+String(seconds+100).substr(1,2);			return timeString;		}		public function clickCard(event:MouseEvent) 		{			var thisCard:Card = (event.currentTarget as Card); //what card?			trace("you clicked on card at frame num:"+event.currentTarget.getFrameNumber());			//event.currentTarget.flip();						if (firstCard == null) 			{				trace("firstCard flipped");				firstCard = thisCard; //note it				firstCard.flip(); //turn it over			} 						else if (firstCard == thisCard) 			{				trace("firstCard flip back");				//firstCard.gotoAndStop(1); //turn back over				firstCard.flip();				firstCard = null;					gameScore += pointsForMiss;					showGameScore();					//applying the flip method again seemed to help the first card				//firstCard = null;			} 						else if (secondCard == null) 			{ //second card in a pair				trace("secondCard flipped");				secondCard = thisCard; //note it				//secondCard.flip();				 //turn it over						//trying allowing secondCard to be thisCard			//attempt deleted							//compare two cards				if (firstCard.getFrameNumber() == secondCard.getFrameNumber()) 				{					//remove a match					trace("cheese");					secondCard.flip();					matchViewTimer = new Timer(1000, 1);					matchViewTimer.addEventListener(TimerEvent.TIMER_COMPLETE, removeMatch);					matchViewTimer.start();					gameScore += pointsForMatch;					showGameScore();					matchTracker -=1;						trace("matchTracker "+matchTracker);					    trace("firstCard.getFrameNumber() "+firstCard.getFrameNumber());												if(firstCard.getFrameNumber()==10){														// if cards matched is hat then							 trace("event for 10 broadcasted");							 bob.dispatchEvent(new Event("onHeadHatStartPlacement")); 							 listFull.lineHat.visible = true;						}												if(firstCard.getFrameNumber()==5){							// if cards matched is monocle then							trace("event for 5 broadcasted");							bob.dispatchEvent(new Event("onHeadMonocleStartPlacement"));							listFull.lineMonocle.visible = true;						}												if(firstCard.getFrameNumber()==9) {							trace("event for 9 broadcasted");							bob.dispatchEvent(new Event("onTorsoTieStartPlacement"));							listFull.lineTie.visible = true;						}												if(firstCard.getFrameNumber()==8) {							trace("event for 8 broadcasted");							bob.dispatchEvent(new Event("onTorsoShirtStartPlacement"));							listFull.lineSuit.visible = true;						}												if(firstCard.getFrameNumber()==11) {							trace("event for 11 broadcasted");							bob.dispatchEvent(new Event("onTorsoWalletStartPlacement"));							listFull.lineWallet.visible = true;						}												if(firstCard.getFrameNumber()==2) {							trace("event for 2 broadcasted");							bob.dispatchEvent(new Event("onTorsoPenStartPlacement"));							listFull.linePen.visible = true;						}												if(firstCard.getFrameNumber()==3) {							trace("event for 3 broadcasted");							bob.dispatchEvent(new Event("onTorsoGloveStartPlacement"));							listFull.lineGloves.visible = true;						}												if(firstCard.getFrameNumber()==7) {							trace("event for 7 broadcasted");							bob.dispatchEvent(new Event("onLegsShoeLeftStartPlacement"));							//bob.dispatchEvent(new Event("onLegsShoeRightStartPlacement"));							listFull.lineShoes.visible = true;						}												if(firstCard.getFrameNumber()==1) {							trace("event for 1 broadcasted");							bob.dispatchEvent(new Event("onHandCaneStartPlacement"));							listFull.lineCane.visible = true;						}												if(firstCard.getFrameNumber()==0) {							trace("event for 0 broadcasted");							bob.dispatchEvent(new Event("onTorsoWatchStartPlacement"));							listFull.lineWatch.visible = true;						}												if(firstCard.getFrameNumber()==6) {							trace("event for 6 broadcasted");							bob.dispatchEvent(new Event("onLegBrushStartPlacement"));							listFull.lineBrush.visible = true;						}												if(firstCard.getFrameNumber()==4) {							trace("event for 4 broadcasted");							bob.dispatchEvent(new Event("onTorsoKeysStartPlacement"));							listFull.lineKeys.visible = true;						}																	//removeChild(firstCard);					//removeChild(secondCard);										//reset selection										//firstCard = null;					//secondCard = null;										//reset selection					//firstCard = null;					//secondCard = null;				} 								else 				{   					//starting to pick another pair					//reset previous pair					secondCard.flip();					//secondCard.flip();					flipBackTimer = new Timer(500,1);					flipBackTimer.addEventListener(TimerEvent.TIMER_COMPLETE, returnCards);					flipBackTimer.start();					gameScore += pointsForMiss;					showGameScore();										//firstCard = null;					//secondCard = null;					//select first card in next pair						//firstCard = thisCard;					//firstCard.gotoAndStop(1); //thisCard.cardface+2);				}							if (matchTracker == 0) {				trace("YOU ARE DONE; GOOD JOB!");			}							}								function removeMatch(event:TimerEvent) {				removeChild(firstCard);				removeChild(secondCard);				firstCard = null;				secondCard = null;			}							function returnCards(event:TimerEvent) {				if (firstCard != null) 						firstCard.flip();				if (secondCard != null) 					secondCard.flip();				firstCard = null;				secondCard = null;				flipBackTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, returnCards);			}									function showGameScore() {				score_txt.text = "Score: "+String(gameScore);			}					}						}}