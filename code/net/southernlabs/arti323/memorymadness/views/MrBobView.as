package net.southernlabs.arti323.memorymadness.views{	import flash.display.*;	import flash.events.*;	public class MrBobView extends MovieClip	{		public function MrBobView():void		{			// constructor code			init();					}						public function init() {			this.headRegion.hat.visible = false;			this.headRegion.monocle.visible = false;			//head items			this.torsoFull.fullShirtTorso.visible = false;			this.armLeftUpper.shirtLeftUpper.visible = false;			this.armLeftLower.shirtLeftLower.visible = false;			this.armRightUpper.shirtRightUpper.visible = false;			this.armRightLower.shirtRightLower.visible = false;			//shirt, sleeves			this.torsoFull.tie.visible = false;			this.armLeftFull.gloveLeft.visible = false;			this.armRightFull.gloveRight.visible = false;			//tie, gloves			this.torsoFull.wallet.visible = false;			this.torsoFull.watch.visible = false;			this.torsoFull.keys.visible = false;			this.torsoFull.pen.visible = false;			this.torsoFull.keys.visible = false;			//items tucked into shirt			this.upperLegLeft.pantsLeftUpper.visible = false;			this.lowerLegLeft.pantsLeftLower.visible = false;			this.shoeFootLeft.shoeLeft.visible = false;			this.upperLegRight.pantsRightUpper.visible = false;			this.lowerLegRight.pantsRightLower.visible = false;			this.shoeFootRight.shoeRight.visible = false;			this.upperLegRight.brush.visible = false;			this.armRightFull.cane.visible = false;			//pants, shoes, moustache brush, cane			this.armLeftFull.brushInHand.visible = false;			this.armLeftFull.monocleInHand.visible = false;			this.armLeftFull.caneInHand.visible = false;			this.armLeftFull.tieInHand.visible = false;			this.armLeftFull.brushInHand.visible = false;			this.armLeftFull.watchInHand.visible = false;			this.armLeftFull.walletInHand.visible = false;			this.armLeftFull.keysInHand.visible = false;			this.armLeftFull.penInHand.visible = false;			this.armLeftFull.shoeLeftInHand.visible = false;			this.armLeftFull.shoeRightInHand.visible = false;			this.armLeftFull.hatInHand.visible = false;			//items in left hand			addEventListener(KeyboardEvent.KEY_DOWN, myKeyDown);						addEventListener("onHeadHatStartPlacement", handleOnHeadHatStartPlacement);			addEventListener("onHeadMonocleStartPlacement", handleOnHeadMonocleStartPlacement);			addEventListener("onTorsoTieStartPlacement", handleOnTorsoTieStartPlacement);			addEventListener("onTorsoShirtStartPlacement", handleOnTorsoShirtStartPlacement);			addEventListener("onTorsoWalletStartPlacement", handleOnTorsoWalletStartPlacement);			addEventListener("onTorsoPenStartPlacement", handleOnTorsoPenStartPlacement);			addEventListener("onTorsoGloveStartPlacement", handleOnTorsoGloveStartPlacement);			//addEventListener("onLegsPantsStartPlacement", handleOnLegsPantsStartPlacement);			addEventListener("onLegsShoeLeftStartPlacement", handleOnLegsShoeLeftStartPlacement);			//addEventListener("onLegsShoeRightStartPlacement", handleOnLegsShoeRightStartPlacement);			addEventListener("onHandCaneStartPlacement", handleOnHandCaneStartPlacement);			addEventListener("onLegBrushStartPlacement", handleOnLegBrushStartPlacement);			addEventListener("onTorsoWatchStartPlacement", handleOnTorsoWatchStartPlacement);			addEventListener("onTorsoKeysStartPlacement", handleOnTorsoKeysStartPlacement);						addEventListener("onHeadHatPlacement", handleOnHatPlacement);			addEventListener("onHeadMonoclePlacement", handleOnMonoclePlacement);			addEventListener("onTorsoTiePlacement", handleOnTiePlacement);			addEventListener("onTorsoShirtPlacement", handleOnShirtPlacement);			addEventListener("onTorsoWalletPlacement", handleOnWalletPlacement);			addEventListener("onTorsoPenPlacement", handleOnPenPlacement);			addEventListener("onTorsoGlovePlacement", handleOnGlovePlacement);			addEventListener("onLegsPantsPlacement", handleOnPantsPlacement);			addEventListener("onLegsShoeLeftPlacement", handleOnShoeLeftPlacement);			addEventListener("onLegsShoeRightPlacement", handleOnShoeRightPlacement);			addEventListener("onHandCanePlacement", handleOnCanePlacement);			addEventListener("onLegBrushPlacement", handleOnBrushPlacement);			addEventListener("onTorsoWatchPlacement", handleOnWatchPlacement);			addEventListener("onTorsoKeysPlacement", handleOnKeysPlacement);								//event listeners are all together so that they can be ready to go at any second, amirite?. :P			trace("this part works");		}								//functions for visibility/ void means it won't return a value		public function handleOnHeadHatStartPlacement(e:Event)		{			trace("hat goes on head");			this.gotoAndPlay("hat");			this.armLeftFull.hatInHand.visible = true;		}		public function handleOnHeadMonocleStartPlacement(e:Event)		{			trace("monocle goes on face");			this.gotoAndPlay("monocle");			this.armLeftFull.monocleInHand.visible = true;		}		public function handleOnTorsoTieStartPlacement(e:Event)		{			trace("tie goes on body");			this.gotoAndPlay("tie");			this.armLeftFull.tieInHand.visible = true;					}		public function handleOnTorsoShirtStartPlacement(e:Event)		{			trace("suit appears on body");			this.gotoAndPlay("suit");		}		public function handleOnTorsoWalletStartPlacement(e:Event)		{			trace("wallet appears on body");			this.gotoAndPlay("wallet");			this.armLeftFull.walletInHand.visible = true;					}		public function handleOnTorsoPenStartPlacement(e:Event)		{			trace("pen appears on body");			this.gotoAndPlay("pen");			this.armLeftFull.penInHand.visible = true;		}		public function handleOnTorsoGloveStartPlacement(e:Event)		{			trace("gloves appear on hands");			this.gotoAndPlay("gloves");		}		public function handleOnLegsShoeLeftStartPlacement(e:Event)		{			trace("shoes appear on feet");			this.gotoAndPlay("shoes");			this.armLeftFull.shoeLeftInHand.visible = true;			this.armLeftFull.shoeRightInHand.visible = true;		}		public function handleOnHandCaneStartPlacement(e:Event)		{			trace("cane appears in hand");			this.gotoAndPlay("cane");			this.armLeftFull.caneInHand.visible = true;		}		public function handleOnLegBrushStartPlacement(e:Event)		{			trace("brush appears on leg");			this.gotoAndPlay("brush");			this.armLeftFull.brushInHand.visible = true;					}		public function handleOnTorsoWatchStartPlacement(e:Event)		{			trace("watch appears on torso");			this.gotoAndPlay("watch");			this.armLeftFull.watchInHand.visible = true;		}		public function handleOnTorsoKeysStartPlacement(e:Event)		{			trace("keys appear on torso");			this.gotoAndPlay("keys");			this.armLeftFull.keysInHand.visible = true;					}										//functions for visibility/ void means it won't return a value		public function handleOnHatPlacement(e:Event)		{			this.headRegion.hat.visible = true;			this.armLeftFull.hatInHand.visible = false;			//stage.removeEventListener("onHeadHatPlacement", handleOnHatPlacement);		}		public function handleOnMonoclePlacement(e:Event)		{			this.headRegion.monocle.visible = true;			this.armLeftFull.monocleInHand.visible = false;		}		public function handleOnTiePlacement(e:Event)		{			this.torsoFull.tie.visible = true;			this.armLeftFull.tieInHand.visible = false;		}		public function handleOnShirtPlacement(e:Event)		{			this.torsoFull.fullShirtTorso.visible = true;			this.armLeftUpper.shirtLeftUpper.visible = true;			this.armLeftLower.shirtLeftLower.visible = true;			this.armRightUpper.shirtRightUpper.visible = true;			this.armRightLower.shirtRightLower.visible = true;		}		public function handleOnWalletPlacement(e:Event)		{			this.torsoFull.wallet.visible = true;			this.armLeftFull.walletInHand.visible = false;		}		public function handleOnPenPlacement(e:Event)		{			this.torsoFull.pen.visible = true;			this.armLeftFull.penInHand.visible = false;		}		public function handleOnGlovePlacement(e:Event)		{			this.armLeftFull.gloveLeft.visible = true;			this.armRightFull.gloveRight.visible = true;		}		public function handleOnPantsPlacement(e:Event)		{			this.upperLegLeft.pantsLeftUpper.visible = true;			this.lowerLegLeft.pantsLeftLower.visible = true;			this.upperLegRight.pantsRightUpper.visible = true;			this.lowerLegRight.pantsRightLower.visible = true;		}		public function handleOnShoeLeftPlacement(e:Event)		{			trace("handleOnShoeLeftPlacement");			this.shoeFootLeft.shoeLeft.visible = true;			this.armLeftFull.shoeLeftInHand.visible = false;		}		public function handleOnShoeRightPlacement(e:Event)		{			trace("handleOnShoeRightPlacement");			this.shoeFootRight.shoeRight.visible = true;			this.armLeftFull.shoeRightInHand.visible = false;		}		public function handleOnCanePlacement(e:Event)		{			//this.armRightFull.cane.visible = 1;			this.armLeftFull.caneInHand.visible = false;			this.armRightFull.cane.visible = true;		}		public function handleOnBrushPlacement(e:Event)		{			this.upperLegRight.brush.visible = true;			this.armLeftFull.brushInHand.visible = false;		}		public function handleOnWatchPlacement(e:Event)		{			this.torsoFull.watch.visible = true;			this.armLeftFull.watchInHand.visible = false;		}		public function handleOnKeysPlacement(e:Event)		{			this.torsoFull.keys.visible = true;			this.armLeftFull.keysInHand.visible = false;		}		//key functions/void here stops the event from playing again by NOT returning a value.		public function myKeyDown(e:KeyboardEvent)		{			if (e.charCode == 97)			{				//this is the "a" key.				this.gotoAndPlay("hat");				this.armLeftFull.hatInHand.visible = true;			}			else if (e.charCode == 115)			{				//this is the "s" key.				this.gotoAndPlay("monocle");				this.armLeftFull.monocleInHand.visible = true;			}			else if (e.charCode == 100)			{				//this is the "d" key. 				this.gotoAndPlay("tie");				this.armLeftFull.tieInHand.visible = true;			}			else if (e.charCode == 102)			{				//this is the "f" key.				this.gotoAndPlay("suit");			}			else if (e.charCode == 103)			{				//this is the "g" key.				this.gotoAndPlay("wallet");				this.armLeftFull.walletInHand.visible = true;			}			else if (e.charCode == 104)			{				//this is the "h" key.				this.gotoAndPlay("pen");				this.armLeftFull.penInHand.visible = true;			}			else if (e.charCode == 106)			{				//this kis the "j" key.				this.gotoAndPlay("gloves");			}			else if (e.charCode == 107)			{				//this is the "k" key.				this.gotoAndPlay("pants");			}			else if (e.charCode == 108)			{				//this is the "l" key.				this.gotoAndPlay("shoes");				this.armLeftFull.shoeLeftInHand.visible = true;				this.armLeftFull.shoeRightInHand.visible = true;			}			else if (e.charCode == 122)			{				//this is the "z" key.				this.gotoAndPlay("cane");				this.armLeftFull.caneInHand.visible = true;			}			else if (e.charCode == 120)			{				//this is the "x" key.				this.gotoAndPlay("brush");				this.armLeftFull.brushInHand.visible = true;			}			else if (e.charCode == 99)			{				//this is the "c" key.				this.gotoAndPlay("watch");				this.armLeftFull.watchInHand.visible = true;			}			else if (e.charCode == 118)			{				//suppose to be the "v" key				this.gotoAndPlay("keys");				this.armLeftFull.keysInHand.visible = true;			}		}	}}